@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>

 <div id="dashboard">
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script> 
    <div id="chart_div" style="width: 1500px; height: 500px;"></div>
    <div style="margin-top: 50px">
        <p>Список новостей</p>
        <div id="news_container">

        </div>
    </div>
</div>

<script type="text/javascript">
    const Periods = { DAY: 'day', HOUR: 'hour' };
    const ChartTypes = { CANDLES: 'candles', TREND: 'trend' };
    let currentChartType = ChartTypes.TREND;
    let shareIds = [5, 6, 7, 10];
    let currentChartPeriod = Periods.DAY;

    google.charts.load('current', {'packages': ['annotationchart']});
    google.charts.setOnLoadCallback(function() { drawTrend(Periods.DAY, shareIds) });

    function drawTrend(period, share) {
        $.ajax({
            type: "GET",
            url: 'Home/GetCandles',  
            data: {
                period: period,
                shareIds: shareIds
            },
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                drawChart(response);
            },
        });
    }

    function drawChart(json) {
        let shares = json[1];
        let news = json[0];
        let data = new google.visualization.DataTable();
        
        for (let i = 0; i < shares.length; i++) {
            data.addColumn('date', 'Date');
            data.addColumn('number', 'open_' + shares[i][0]);
            data.addColumn('string', shares[i][0]);
        }
        let rows = [];
        for (let i = 0; i < shares.length; i++) {
            let shareName = shares[i][0];
            let candles = shares[i][1];
            let row = [];
            for (let j = 0; j < candles.length; j++) {
                row.push(new Date(candles[j].Date));
                row.push(candles[j].Low);
                row.push(shareName);
                
            }
        }
        console.log(row);
        rows.push(row);
        console.log(rows);
        data.addRows(rows);

        let chart = new google.visualization.AnnotationChart(document.getElementById('chart_div'));
        let options = {
            displayAnnotations: false
        };
        google.visualization.events.addListener(chart, 'ready', onReady);
        google.visualization.events.addListener(chart, 'select', onSelectDate);
        chart.draw(data, options);
        function onReady() {
            let x = document.getElementById('chart_div_AnnotationChart_zoomControlContainer').getElementsByTagName('button');
            document.getElementById('chart_div_AnnotationChart_zoomControlContainer').style.fontSize = '14px';
            for (let i = 0; i < x.length; i++) {
                x[i].style.height = '40px';
                x[i].style.width = '40px';
                x[i].style.fontSize = '14px';
            }
        }
        function onSelectDate() {
            let selection = chart.getSelection();
            let i = selection[0].row;
            let date = candles[i].Date;
            console.log(new Date(news[0].DateTime).toDateString());
            const result = news.filter(currentNews => new Date(currentNews.DateTime).toDateString() == new Date(date).toDateString());
            console.log(result);
            let newsContainer = document.getElementById('news_container');
             for (let i = 0; i < result.length; i++) {
                 let newsElement = '<p>'+result[i].Text+'</p>';
                 $("#news_container").append(newsElement);
            }
        }
    }
</script>